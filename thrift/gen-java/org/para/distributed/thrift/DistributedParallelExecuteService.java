/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.para.distributed.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DistributedParallelExecuteService {

  public interface Iface {

    public boolean startDistributedParallelExecute(String jarHttpURI, String mainClassName, int blockNum, Map<String,String> parameterMap) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void startDistributedParallelExecute(String jarHttpURI, String mainClassName, int blockNum, Map<String,String> parameterMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean startDistributedParallelExecute(String jarHttpURI, String mainClassName, int blockNum, Map<String,String> parameterMap) throws org.apache.thrift.TException
    {
      send_startDistributedParallelExecute(jarHttpURI, mainClassName, blockNum, parameterMap);
      return recv_startDistributedParallelExecute();
    }

    public void send_startDistributedParallelExecute(String jarHttpURI, String mainClassName, int blockNum, Map<String,String> parameterMap) throws org.apache.thrift.TException
    {
      startDistributedParallelExecute_args args = new startDistributedParallelExecute_args();
      args.setJarHttpURI(jarHttpURI);
      args.setMainClassName(mainClassName);
      args.setBlockNum(blockNum);
      args.setParameterMap(parameterMap);
      sendBase("startDistributedParallelExecute", args);
    }

    public boolean recv_startDistributedParallelExecute() throws org.apache.thrift.TException
    {
      startDistributedParallelExecute_result result = new startDistributedParallelExecute_result();
      receiveBase(result, "startDistributedParallelExecute");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startDistributedParallelExecute failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void startDistributedParallelExecute(String jarHttpURI, String mainClassName, int blockNum, Map<String,String> parameterMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startDistributedParallelExecute_call method_call = new startDistributedParallelExecute_call(jarHttpURI, mainClassName, blockNum, parameterMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startDistributedParallelExecute_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jarHttpURI;
      private String mainClassName;
      private int blockNum;
      private Map<String,String> parameterMap;
      public startDistributedParallelExecute_call(String jarHttpURI, String mainClassName, int blockNum, Map<String,String> parameterMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jarHttpURI = jarHttpURI;
        this.mainClassName = mainClassName;
        this.blockNum = blockNum;
        this.parameterMap = parameterMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startDistributedParallelExecute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startDistributedParallelExecute_args args = new startDistributedParallelExecute_args();
        args.setJarHttpURI(jarHttpURI);
        args.setMainClassName(mainClassName);
        args.setBlockNum(blockNum);
        args.setParameterMap(parameterMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startDistributedParallelExecute();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("startDistributedParallelExecute", new startDistributedParallelExecute());
      return processMap;
    }

    public static class startDistributedParallelExecute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startDistributedParallelExecute_args> {
      public startDistributedParallelExecute() {
        super("startDistributedParallelExecute");
      }

      public startDistributedParallelExecute_args getEmptyArgsInstance() {
        return new startDistributedParallelExecute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public startDistributedParallelExecute_result getResult(I iface, startDistributedParallelExecute_args args) throws org.apache.thrift.TException {
        startDistributedParallelExecute_result result = new startDistributedParallelExecute_result();
        result.success = iface.startDistributedParallelExecute(args.jarHttpURI, args.mainClassName, args.blockNum, args.parameterMap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("startDistributedParallelExecute", new startDistributedParallelExecute());
      return processMap;
    }

    public static class startDistributedParallelExecute<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, startDistributedParallelExecute_args, Boolean> {
      public startDistributedParallelExecute() {
        super("startDistributedParallelExecute");
      }

      public startDistributedParallelExecute_args getEmptyArgsInstance() {
        return new startDistributedParallelExecute_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            startDistributedParallelExecute_result result = new startDistributedParallelExecute_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            startDistributedParallelExecute_result result = new startDistributedParallelExecute_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, startDistributedParallelExecute_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.startDistributedParallelExecute(args.jarHttpURI, args.mainClassName, args.blockNum, args.parameterMap,resultHandler);
      }
    }

  }

  public static class startDistributedParallelExecute_args implements org.apache.thrift.TBase<startDistributedParallelExecute_args, startDistributedParallelExecute_args._Fields>, java.io.Serializable, Cloneable, Comparable<startDistributedParallelExecute_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startDistributedParallelExecute_args");

    private static final org.apache.thrift.protocol.TField JAR_HTTP_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("jarHttpURI", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MAIN_CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("mainClassName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BLOCK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("blockNum", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PARAMETER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterMap", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startDistributedParallelExecute_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startDistributedParallelExecute_argsTupleSchemeFactory());
    }

    public String jarHttpURI; // required
    public String mainClassName; // required
    public int blockNum; // required
    public Map<String,String> parameterMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JAR_HTTP_URI((short)1, "jarHttpURI"),
      MAIN_CLASS_NAME((short)2, "mainClassName"),
      BLOCK_NUM((short)3, "blockNum"),
      PARAMETER_MAP((short)4, "parameterMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JAR_HTTP_URI
            return JAR_HTTP_URI;
          case 2: // MAIN_CLASS_NAME
            return MAIN_CLASS_NAME;
          case 3: // BLOCK_NUM
            return BLOCK_NUM;
          case 4: // PARAMETER_MAP
            return PARAMETER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BLOCKNUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JAR_HTTP_URI, new org.apache.thrift.meta_data.FieldMetaData("jarHttpURI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAIN_CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("mainClassName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BLOCK_NUM, new org.apache.thrift.meta_data.FieldMetaData("blockNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARAMETER_MAP, new org.apache.thrift.meta_data.FieldMetaData("parameterMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startDistributedParallelExecute_args.class, metaDataMap);
    }

    public startDistributedParallelExecute_args() {
    }

    public startDistributedParallelExecute_args(
      String jarHttpURI,
      String mainClassName,
      int blockNum,
      Map<String,String> parameterMap)
    {
      this();
      this.jarHttpURI = jarHttpURI;
      this.mainClassName = mainClassName;
      this.blockNum = blockNum;
      setBlockNumIsSet(true);
      this.parameterMap = parameterMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startDistributedParallelExecute_args(startDistributedParallelExecute_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetJarHttpURI()) {
        this.jarHttpURI = other.jarHttpURI;
      }
      if (other.isSetMainClassName()) {
        this.mainClassName = other.mainClassName;
      }
      this.blockNum = other.blockNum;
      if (other.isSetParameterMap()) {
        Map<String,String> __this__parameterMap = new HashMap<String,String>(other.parameterMap);
        this.parameterMap = __this__parameterMap;
      }
    }

    public startDistributedParallelExecute_args deepCopy() {
      return new startDistributedParallelExecute_args(this);
    }

    @Override
    public void clear() {
      this.jarHttpURI = null;
      this.mainClassName = null;
      setBlockNumIsSet(false);
      this.blockNum = 0;
      this.parameterMap = null;
    }

    public String getJarHttpURI() {
      return this.jarHttpURI;
    }

    public startDistributedParallelExecute_args setJarHttpURI(String jarHttpURI) {
      this.jarHttpURI = jarHttpURI;
      return this;
    }

    public void unsetJarHttpURI() {
      this.jarHttpURI = null;
    }

    /** Returns true if field jarHttpURI is set (has been assigned a value) and false otherwise */
    public boolean isSetJarHttpURI() {
      return this.jarHttpURI != null;
    }

    public void setJarHttpURIIsSet(boolean value) {
      if (!value) {
        this.jarHttpURI = null;
      }
    }

    public String getMainClassName() {
      return this.mainClassName;
    }

    public startDistributedParallelExecute_args setMainClassName(String mainClassName) {
      this.mainClassName = mainClassName;
      return this;
    }

    public void unsetMainClassName() {
      this.mainClassName = null;
    }

    /** Returns true if field mainClassName is set (has been assigned a value) and false otherwise */
    public boolean isSetMainClassName() {
      return this.mainClassName != null;
    }

    public void setMainClassNameIsSet(boolean value) {
      if (!value) {
        this.mainClassName = null;
      }
    }

    public int getBlockNum() {
      return this.blockNum;
    }

    public startDistributedParallelExecute_args setBlockNum(int blockNum) {
      this.blockNum = blockNum;
      setBlockNumIsSet(true);
      return this;
    }

    public void unsetBlockNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKNUM_ISSET_ID);
    }

    /** Returns true if field blockNum is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockNum() {
      return EncodingUtils.testBit(__isset_bitfield, __BLOCKNUM_ISSET_ID);
    }

    public void setBlockNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKNUM_ISSET_ID, value);
    }

    public int getParameterMapSize() {
      return (this.parameterMap == null) ? 0 : this.parameterMap.size();
    }

    public void putToParameterMap(String key, String val) {
      if (this.parameterMap == null) {
        this.parameterMap = new HashMap<String,String>();
      }
      this.parameterMap.put(key, val);
    }

    public Map<String,String> getParameterMap() {
      return this.parameterMap;
    }

    public startDistributedParallelExecute_args setParameterMap(Map<String,String> parameterMap) {
      this.parameterMap = parameterMap;
      return this;
    }

    public void unsetParameterMap() {
      this.parameterMap = null;
    }

    /** Returns true if field parameterMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParameterMap() {
      return this.parameterMap != null;
    }

    public void setParameterMapIsSet(boolean value) {
      if (!value) {
        this.parameterMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JAR_HTTP_URI:
        if (value == null) {
          unsetJarHttpURI();
        } else {
          setJarHttpURI((String)value);
        }
        break;

      case MAIN_CLASS_NAME:
        if (value == null) {
          unsetMainClassName();
        } else {
          setMainClassName((String)value);
        }
        break;

      case BLOCK_NUM:
        if (value == null) {
          unsetBlockNum();
        } else {
          setBlockNum((Integer)value);
        }
        break;

      case PARAMETER_MAP:
        if (value == null) {
          unsetParameterMap();
        } else {
          setParameterMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JAR_HTTP_URI:
        return getJarHttpURI();

      case MAIN_CLASS_NAME:
        return getMainClassName();

      case BLOCK_NUM:
        return Integer.valueOf(getBlockNum());

      case PARAMETER_MAP:
        return getParameterMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JAR_HTTP_URI:
        return isSetJarHttpURI();
      case MAIN_CLASS_NAME:
        return isSetMainClassName();
      case BLOCK_NUM:
        return isSetBlockNum();
      case PARAMETER_MAP:
        return isSetParameterMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startDistributedParallelExecute_args)
        return this.equals((startDistributedParallelExecute_args)that);
      return false;
    }

    public boolean equals(startDistributedParallelExecute_args that) {
      if (that == null)
        return false;

      boolean this_present_jarHttpURI = true && this.isSetJarHttpURI();
      boolean that_present_jarHttpURI = true && that.isSetJarHttpURI();
      if (this_present_jarHttpURI || that_present_jarHttpURI) {
        if (!(this_present_jarHttpURI && that_present_jarHttpURI))
          return false;
        if (!this.jarHttpURI.equals(that.jarHttpURI))
          return false;
      }

      boolean this_present_mainClassName = true && this.isSetMainClassName();
      boolean that_present_mainClassName = true && that.isSetMainClassName();
      if (this_present_mainClassName || that_present_mainClassName) {
        if (!(this_present_mainClassName && that_present_mainClassName))
          return false;
        if (!this.mainClassName.equals(that.mainClassName))
          return false;
      }

      boolean this_present_blockNum = true;
      boolean that_present_blockNum = true;
      if (this_present_blockNum || that_present_blockNum) {
        if (!(this_present_blockNum && that_present_blockNum))
          return false;
        if (this.blockNum != that.blockNum)
          return false;
      }

      boolean this_present_parameterMap = true && this.isSetParameterMap();
      boolean that_present_parameterMap = true && that.isSetParameterMap();
      if (this_present_parameterMap || that_present_parameterMap) {
        if (!(this_present_parameterMap && that_present_parameterMap))
          return false;
        if (!this.parameterMap.equals(that.parameterMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(startDistributedParallelExecute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJarHttpURI()).compareTo(other.isSetJarHttpURI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJarHttpURI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jarHttpURI, other.jarHttpURI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMainClassName()).compareTo(other.isSetMainClassName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMainClassName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mainClassName, other.mainClassName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBlockNum()).compareTo(other.isSetBlockNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockNum, other.blockNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParameterMap()).compareTo(other.isSetParameterMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameterMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterMap, other.parameterMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startDistributedParallelExecute_args(");
      boolean first = true;

      sb.append("jarHttpURI:");
      if (this.jarHttpURI == null) {
        sb.append("null");
      } else {
        sb.append(this.jarHttpURI);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mainClassName:");
      if (this.mainClassName == null) {
        sb.append("null");
      } else {
        sb.append(this.mainClassName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("blockNum:");
      sb.append(this.blockNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameterMap:");
      if (this.parameterMap == null) {
        sb.append("null");
      } else {
        sb.append(this.parameterMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startDistributedParallelExecute_argsStandardSchemeFactory implements SchemeFactory {
      public startDistributedParallelExecute_argsStandardScheme getScheme() {
        return new startDistributedParallelExecute_argsStandardScheme();
      }
    }

    private static class startDistributedParallelExecute_argsStandardScheme extends StandardScheme<startDistributedParallelExecute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startDistributedParallelExecute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JAR_HTTP_URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jarHttpURI = iprot.readString();
                struct.setJarHttpURIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MAIN_CLASS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mainClassName = iprot.readString();
                struct.setMainClassNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BLOCK_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.blockNum = iprot.readI32();
                struct.setBlockNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARAMETER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.parameterMap = new HashMap<String,String>(2*_map0.size);
                  for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                  {
                    String _key2;
                    String _val3;
                    _key2 = iprot.readString();
                    _val3 = iprot.readString();
                    struct.parameterMap.put(_key2, _val3);
                  }
                  iprot.readMapEnd();
                }
                struct.setParameterMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startDistributedParallelExecute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jarHttpURI != null) {
          oprot.writeFieldBegin(JAR_HTTP_URI_FIELD_DESC);
          oprot.writeString(struct.jarHttpURI);
          oprot.writeFieldEnd();
        }
        if (struct.mainClassName != null) {
          oprot.writeFieldBegin(MAIN_CLASS_NAME_FIELD_DESC);
          oprot.writeString(struct.mainClassName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BLOCK_NUM_FIELD_DESC);
        oprot.writeI32(struct.blockNum);
        oprot.writeFieldEnd();
        if (struct.parameterMap != null) {
          oprot.writeFieldBegin(PARAMETER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.parameterMap.size()));
            for (Map.Entry<String, String> _iter4 : struct.parameterMap.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startDistributedParallelExecute_argsTupleSchemeFactory implements SchemeFactory {
      public startDistributedParallelExecute_argsTupleScheme getScheme() {
        return new startDistributedParallelExecute_argsTupleScheme();
      }
    }

    private static class startDistributedParallelExecute_argsTupleScheme extends TupleScheme<startDistributedParallelExecute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startDistributedParallelExecute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJarHttpURI()) {
          optionals.set(0);
        }
        if (struct.isSetMainClassName()) {
          optionals.set(1);
        }
        if (struct.isSetBlockNum()) {
          optionals.set(2);
        }
        if (struct.isSetParameterMap()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetJarHttpURI()) {
          oprot.writeString(struct.jarHttpURI);
        }
        if (struct.isSetMainClassName()) {
          oprot.writeString(struct.mainClassName);
        }
        if (struct.isSetBlockNum()) {
          oprot.writeI32(struct.blockNum);
        }
        if (struct.isSetParameterMap()) {
          {
            oprot.writeI32(struct.parameterMap.size());
            for (Map.Entry<String, String> _iter5 : struct.parameterMap.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startDistributedParallelExecute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.jarHttpURI = iprot.readString();
          struct.setJarHttpURIIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mainClassName = iprot.readString();
          struct.setMainClassNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.blockNum = iprot.readI32();
          struct.setBlockNumIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.parameterMap = new HashMap<String,String>(2*_map6.size);
            for (int _i7 = 0; _i7 < _map6.size; ++_i7)
            {
              String _key8;
              String _val9;
              _key8 = iprot.readString();
              _val9 = iprot.readString();
              struct.parameterMap.put(_key8, _val9);
            }
          }
          struct.setParameterMapIsSet(true);
        }
      }
    }

  }

  public static class startDistributedParallelExecute_result implements org.apache.thrift.TBase<startDistributedParallelExecute_result, startDistributedParallelExecute_result._Fields>, java.io.Serializable, Cloneable, Comparable<startDistributedParallelExecute_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startDistributedParallelExecute_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startDistributedParallelExecute_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startDistributedParallelExecute_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startDistributedParallelExecute_result.class, metaDataMap);
    }

    public startDistributedParallelExecute_result() {
    }

    public startDistributedParallelExecute_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startDistributedParallelExecute_result(startDistributedParallelExecute_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public startDistributedParallelExecute_result deepCopy() {
      return new startDistributedParallelExecute_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public startDistributedParallelExecute_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startDistributedParallelExecute_result)
        return this.equals((startDistributedParallelExecute_result)that);
      return false;
    }

    public boolean equals(startDistributedParallelExecute_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(startDistributedParallelExecute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startDistributedParallelExecute_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startDistributedParallelExecute_resultStandardSchemeFactory implements SchemeFactory {
      public startDistributedParallelExecute_resultStandardScheme getScheme() {
        return new startDistributedParallelExecute_resultStandardScheme();
      }
    }

    private static class startDistributedParallelExecute_resultStandardScheme extends StandardScheme<startDistributedParallelExecute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startDistributedParallelExecute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startDistributedParallelExecute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startDistributedParallelExecute_resultTupleSchemeFactory implements SchemeFactory {
      public startDistributedParallelExecute_resultTupleScheme getScheme() {
        return new startDistributedParallelExecute_resultTupleScheme();
      }
    }

    private static class startDistributedParallelExecute_resultTupleScheme extends TupleScheme<startDistributedParallelExecute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startDistributedParallelExecute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startDistributedParallelExecute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
